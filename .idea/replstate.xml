<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1490302405206">{:repl-history {:ide [], :local [&quot;(str 203)&quot; &quot;(let [string-of-num (str 1456)]\n  string-of-num)&quot; &quot;(to-array \&quot;1234\&quot;)&quot; &quot;(seq \&quot;1234\&quot;)&quot; &quot;(read-string [\&quot;1\&quot; \&quot;2\&quot;])&quot; &quot;(map read-string [\&quot;1\&quot; \&quot;2\&quot;])&quot; &quot;(use codewars.equal-side-of-an-array)&quot; &quot;(inc 0)\n     &quot; &quot;(def a [1 2 3 4 5])&quot; &quot;(take a -1)&quot; &quot;(take a 3)&quot; &quot;(take 3 a)&quot; &quot;(take -1 a)&quot; &quot;(take (count a) a)&quot; &quot;(take (dec (count a)) a)&quot; &quot;(use codewars.directions-reduction)&quot; &quot;(str (repeat \\a 10))&quot; &quot;(clojure.string/join (repeat 10 \\a) \&quot;\&quot;)&quot; &quot;(clojure.string/join (repeat 10 \\a))&quot; &quot;max-freq-map&quot; &quot;(def a {:k 1})&quot; &quot;(assoc a :k 2)&quot; &quot;(merge-with list a {:k 3})&quot; &quot;(into [ 1 2 3]  5)&quot; &quot;(into [ 1 2 3] 5)&quot; &quot;(into [] 5)&quot; &quot;(into [] 4)&quot; &quot;(into [] [3])&quot; &quot;(conj 3 4)&quot; &quot;(conj 2 [3])&quot; &quot;(conj [[3]] 3)&quot; &quot;(concat 3 3)&quot; &quot;(concat 3 [3])&quot; &quot;(concat [] 3 3)&quot; &quot;(conj [] 3 3)&quot; &quot;(conj [] [3] 3)&quot; &quot;(into [] [4] [3])&quot; &quot;(conj [] 4)&quot; &quot;(into-array '(1 2 3))&quot; &quot;(into [] '(1 2 3))&quot; &quot;(str (repeat 10 \\a))&quot; &quot;(str (repeat 10 \&quot;a\&quot;))&quot; &quot;(clojure.string/join (repeat 10 \&quot;a\&quot;))&quot; &quot;(println\n  (special-string-v2\n    (into (sorted-map-by &gt;)\n      (order-values-in-map\n        (filter #(&gt; (key %) 1)\n                (build-max-freq-v2\n                  (parse-string \&quot;Are the kids at home? aaaaa fffff\&quot;)\n                  (parse-string \&quot;Yes they are here! aaaaa fffff\&quot;)))))))&quot; &quot;(order-values-in-map\n        (filter #(&gt; (key %) 1)\n                (build-max-freq-v2\n                  (parse-string \&quot;Are the kids at home? aaaaa fffff\&quot;)\n                  (parse-string \&quot;Yes they are here! aaaaa fffff\&quot;))))&quot; &quot;(into (sorted-map-by &gt;)\n      (order-values-in-map\n        (filter #(&gt; (key %) 1)\n                (build-max-freq-v2\n                  (parse-string \&quot;Are the kids at home? aaaaa fffff\&quot;)\n                  (parse-string \&quot;Yes they are here! aaaaa fffff\&quot;)))))&quot; &quot;(special-string-v2\n    (into (sorted-map-by &gt;)\n      (order-values-in-map\n        (filter #(&gt; (key %) 1)\n                (build-max-freq-v2\n                  (parse-string \&quot;Are the kids at home? aaaaa fffff\&quot;)\n                  (parse-string \&quot;Yes they are here! aaaaa fffff\&quot;))))))&quot; &quot;(parse-string \&quot;Are the kids at home? aaaaa fffff\&quot;)&quot; &quot;(build-max-freq-v2\n                  (parse-string \&quot;Are the kids at home? aaaaa fffff\&quot;)\n                  (parse-string \&quot;Yes they are here! aaaaa fffff\&quot;))&quot; &quot;(filter #(&gt; (key %) 1)\n                (build-max-freq-v2\n                  (parse-string \&quot;Are the kids at home? aaaaa fffff\&quot;)\n                  (parse-string \&quot;Yes they are here! aaaaa fffff\&quot;)))&quot; &quot;(def a ([6 [{:char \\a, :s \&quot;=\&quot;}]\n         [5 [{:char \\e, :s \&quot;2\&quot;} {:char \\f, :s \&quot;=\&quot;}]]\n         [2 [{:char \\h, :s \&quot;=\&quot;} {:char \\r, :s \&quot;2\&quot;} {:char \\t, :s \&quot;1\&quot;}]]]))&quot; &quot;(to-spec-strg \&quot;1\&quot; \&quot;a\&quot; 10)&quot; &quot;(filter #(&gt; (key %) 1)\n        (build-max-freq-v2\n          (parse-string \&quot;Are the kids at home? aaaaa fffff\&quot;)\n          (parse-string \&quot;Yes they are here! aaaaa fffff\&quot;)))&quot; &quot;(strings-in-order\n  (filter #(&gt; (key %) 1)\n        (build-max-freq-v2\n          (parse-string \&quot;Are the kids at home? aaaaa fffff\&quot;)\n          (parse-string \&quot;Yes they are here! aaaaa fffff\&quot;))))&quot; &quot;(map #(str %)\n     (into {} (filter #(&gt; (key %) 1)\n                (build-max-freq-v2\n                  (parse-string \&quot;Are the kids at home? aaaaa fffff\&quot;)\n                  (parse-string \&quot;Yes they are here! aaaaa fffff\&quot;)))))&quot; &quot;(map #(str (first %))\n     (into {} (filter #(&gt; (key %) 1)\n                (build-max-freq-v2\n                  (parse-string \&quot;Are the kids at home? aaaaa fffff\&quot;)\n                  (parse-string \&quot;Yes they are here! aaaaa fffff\&quot;)))))&quot; &quot;(map #(str (last %))\n     (into {} (filter #(&gt; (key %) 1)\n                (build-max-freq-v2\n                  (parse-string \&quot;Are the kids at home? aaaaa fffff\&quot;)\n                  (parse-string \&quot;Yes they are here! aaaaa fffff\&quot;)))))&quot; &quot;(map #(-&gt;strings-in-order (first %) (last %))\n     (into {} (filter #(&gt; (key %) 1)\n                (build-max-freq-v2\n                  (parse-string \&quot;Are the kids at home? aaaaa fffff\&quot;)\n                  (parse-string \&quot;Yes they are here! aaaaa fffff\&quot;)))))&quot; &quot;(into {} (filter #(&gt; (key %) 1)\n                (build-max-freq-v2\n                  (parse-string \&quot;Are the kids at home? aaaaa fffff\&quot;)\n                  (parse-string \&quot;Yes they are here! aaaaa fffff\&quot;))))&quot; &quot;(build-max-freq-v2 (parse-string s1)\n                              (parse-string s2))&quot; &quot;(defn mix\n  [s1 s2]\n  (process (build-max-freq-v2 (parse-string s1)\n                              (parse-string s2))))&quot; &quot;(map #(-&gt;strings-in-order (first %) (last %))\n      (build-max-freq-v2\n        (parse-string \&quot;Are the kids at home? aaaaa fffff\&quot;)\n        (parse-string \&quot;Yes they are here! aaaaa fffff\&quot;)))&quot; &quot;(process\n      (build-max-freq-v2\n        (parse-string \&quot;Are the kids at home? aaaaa fffff\&quot;)\n        (parse-string \&quot;Yes they are here! aaaaa fffff\&quot;)))&quot; &quot;(deftest example-tests\n         (testing \&quot;codewars is code and wars\&quot;\n                  (is (is-merge \&quot;codewars\&quot; \&quot;code\&quot; \&quot;wars\&quot;)))\n         (testing \&quot;codewars is cdw and oears\&quot;\n                  (is (is-merge \&quot;codewars\&quot; \&quot;cdw\&quot; \&quot;oears\&quot;)))\n         (testing \&quot;codewars are not codwars\&quot;\n                  (is (not( is-merge \&quot;codewars\&quot; \&quot;cod\&quot; \&quot;war\&quot;)))))&quot; &quot;(pop \&quot;asf\&quot;)&quot; &quot;(first \&quot;asdf\&quot;)&quot; &quot;(rest \&quot;asdf\&quot;)&quot; &quot;(rest \&quot;sdaad\&quot;)&quot; &quot;(vector \&quot;sdadsa\&quot;)&quot; &quot;(chars \&quot;sdadsa\&quot;)&quot; &quot;(clojure.string/split \&quot;sdadsa\&quot;)&quot; &quot;(clojure.string/split \&quot;\&quot; \&quot;sdadsa\&quot;)&quot; &quot;(clojure.string/split  \&quot;sdadsa\&quot; \&quot;\&quot;)&quot; &quot;(seq  \&quot;sdadsa\&quot;)&quot; &quot;(gen-combinations [] (seq p1) (seq p2))&quot;], :remote []}}</component>
</project>